<?phprequire_once 'FileManager/File.php';/** * class Image *  */class Image extends File {    /** Aggregations: */    /** Compositions: */    /*     * * Attributes: ** */    protected $_extList = array('gif', 'jpg', 'jpeg', 'png');    /**     *      *     * @param string field      * @return string     * @access public     */    public function download($field) {        $this->_ext = $this->extractExt($_FILES[$field]['name']);        if (isset($_FILES[$field])) {            if (!in_array($ext, $this->_extList)) {                throw new Exception('Bad extension');            }            $tempFileName = 'img_' . date('d-m-Y-H-i-s') . '.' . $ext;            $result = copy($_FILES[$field]['tmp_name'], $this->_path . $tempFileName);            if ($result) {                chmod($this->_path . $tempFileName, 0766);                $this->_name = $tempFileName;                //$this->createPreview();                return $this->_name;            } else {                throw new Exception('Can not upload file');            }        } else {            return false;        }    }// end of member function download    /**     *      *     * @param int size      * @return      * @access public     */    public function createPreview($size = 100) {        $image = $this->_getImageByType();        list($oldxsize, $oldysize) = getimagesize($this->_path . $this->_name);        $newxsize = $oldxsize;        $newysize = $oldysize;//    echo 'X=' . $newxsize . '   Y=' . $newysize. '<br>';        if ($newxsize > $size) {            $newysize = $newysize * $size / $newxsize;            $newxsize = $size;        }        if ($newysize > $size) {            $newxsize = $newxsize * $size / $newysize;            $newysize = $size;        }        $imagePrew = imagecreatetruecolor($newxsize, $newysize);        imagecopyresampled($imagePrew, $image, 0, 0, 0, 0, $newxsize, $newysize, $oldxsize, $oldysize);        $this->_savePreviewFile($imagePrew);        chmod($this->_path . $this->getPreview(), 0666);    }// end of member function createPreview    /**     *      *     * @return      * @access public     */    public function delete() {        unlink($this->_path . $this->getPreview());        parent::delete();    }// end of member function delete    /**     *      *     * @return string     * @access public     */    public function getPreview() {        return str_replace('.', '_prew.', $this->_name);    }// end of member function getPreview    private function _getImageByType() {        switch ($this->_ext) {            case 'gif':                $image = imagecreatefromgif($this->_path . $this->_name);                break;            case 'jpeg':                $image = imagecreatefromjpeg($this->_path . $this->_name);                break;            case 'jpg':                $image = imagecreatefromjpeg($this->_path . $this->_name);                break;            case 'png':                $image = imagecreatefrompng($this->_path . $this->_name);                break;            default:                return false;        }        return $image;    }    private function _savePreviewFile($imagePrew) {        switch ($this->_ext) {            case 'gif': return imagegif($imagePrew, $this->_path . $this->getPreview());            case 'png': return imagepng($imagePrew, $this->_path . $this->getPreview());            case 'jpg': return imagejpeg($imagePrew, $this->_path . $this->getPreview());            case 'jpeg': return imagejpeg($imagePrew, $this->_path . $this->getPreview());        }        return false;    }}// end of Image/* * static public function appendPrewField(&$data){  foreach ($data as &$img) {  $img['prew'] = str_replace('.', '_prew.', $img['img']);  }  } *  * static public function uploadPic_new($file, $field_name = 'pic', $path='') {  global $__cfg;  $_file=array();  $ext_list = array('gif', 'jpg', 'jepg',  'png', 'swf');  $ext = explode('.', strtolower($_FILES[$field_name]['name']));  if (count($ext) == 2 && in_array($ext[1], $ext_list) &&  file_exists($_FILES[$field_name]['tmp_name']) && $_FILES[$field_name]['size'] < 1000000) {  $_file['ext']=$ext[1];  $_file['filename'] = $file . '.' . $_file['ext'];  $_file['fullname'] = $path . $_file['filename'];  vl_functions::_delFile($_file['fullname']);  $result = rename($_FILES[$field_name]['tmp_name'], $__cfg['site.dir'] . $_file['fullname']);  chmod($__cfg['site.dir'] . $_file['fullname'], 0666);  list($x, $y, $type)=getimagesize($__cfg['site.dir'] . $_file['fullname']);  $_file['x']=$x;  $_file['y']=$y;  $_file['type']=$type;  vl_log::logToDB('Загружена картинка ' , vl_log::VL_LOG_INFO );  if ($result) return $_file;  }  return false;  } */?>